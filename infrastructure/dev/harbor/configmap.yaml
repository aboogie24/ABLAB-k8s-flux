apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor
  namespace: harbor
data:
  custom-values.yaml: |
    externalURL: https://harbor.alfredbrowniii.io
    exposureType: ingress
    ingress:
      core:
        ingressClassName: nginx
    volumePermissions:
    
      enabled: false
      image:
        registry: docker.io
        repository: bitnami/os-shell
        tag: 12-debian-12-r30
        digest: ""
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## Example:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## Init container resource requests and limits
      ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Init container' Security Context
      ## Note: the chown of the data folder is done to containerSecurityContext.runAsUser
      ## and not the below volumePermissions.containerSecurityContext.runAsUser
      ## @param volumePermissions.containerSecurityContext.enabled Enable init container Security Context
      ## @param volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
      ## @param volumePermissions.containerSecurityContext.runAsUser User ID for the init container
      ##
      containerSecurityContext:
        enabled: true
        seLinuxOptions: {}
        runAsUser: 1001
    
    # postgresql:
    #   primary:
    #     podSecurityContext: 
    #       fsGroup: 1001
    #       runAsUser: 1001
    #     containerSecurityContext:
    #       runAsUser: 1001
    # redis: 
    #   master: 
    #     podSecurityContext: 
    #       fsGroup: 1001
    #       runAsUser: 1001
    #     containerSecurityContext:
    #       runAsUser: 1001
        
        